{"version":3,"sources":["assets/search.png","database.js","screens/HomeScreen.js","App.js","web-build/register-service-worker.js"],"names":["module","exports","dictionary","HomeScreen","getWord","text","toLowerCase","word","lexicalCategory","definition","setState","err","state","isSearchPressed","examples","View","TextInput","style","styles","inputBox","onChangeText","value","this","TouchableOpacity","onPress","searchButton","Image","image","source","require","Text","React","StyleSheet","create","borderRadius","borderWidth","width","alignSelf","marginTop","alignItems","backgroundColor","height","App","Component","container","flex","justifyContent","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,oC,+LCqD5BC,EArDI,CACjB,IAAQ,CACN,KAAS,MACT,gBAAkB,aAClB,WAAe,8FAEjB,MAAU,CACR,KAAS,QACT,gBAAkB,OAClB,WAAc,qWAEhB,WAAe,CACb,KAAS,aACT,gBAAkB,SAClB,WAAe,0EAEjB,MAAU,CACR,KAAS,QACT,gBAAkB,eAClB,WAAe,2DAEjB,QAAY,CACV,KAAS,UACT,gBAAkB,OAClB,WAAe,6CAEjB,OAAW,CACT,KAAS,SACT,gBAAkB,SAClB,WAAe,0BAEjB,IAAQ,CACN,KAAS,MACT,gBAAkB,UAClB,WAAe,8FAEjB,KAAS,CACP,KAAS,OACT,gBAAkB,OAClB,WAAe,oKAEjB,UAAc,CACZ,KAAS,YACT,gBAAkB,YAClB,WAAe,0EAEjB,SAAa,CACX,KAAS,WACT,gBAAkB,YAClB,WAAe,oD,8cC9CEC,E,gCACjB,aAAc,IAAD,sBACT,gBAYJC,QAAQ,SAACC,GACZA,EAAOA,EAAKC,cACZ,IACA,IAAIC,EAAOL,EAAWG,GAAX,KACPG,EAAkBN,EAAWG,GAAX,gBAClBI,EAAaP,EAAWG,GAAX,WACjB,EAAKK,SAAS,CACb,KAAOH,EACP,gBAAkBC,EAClB,WAAcC,IAKf,MAAME,GACL,EAAKD,SAAS,CACd,KAAO,MACN,gBAAkB,MAClB,WAAc,MACf,KAAO,GACP,iBAAkB,MA/BZ,EAAKE,MAAQ,CACTP,KAAK,GACLQ,iBAAiB,EACjBN,KAAM,aACNC,gBAAkB,GAClBM,SAAU,GACVL,WAAW,GACXF,KAAM,IATD,E,6CAqCJ,IAAD,OACJ,OACA,gBAACQ,EAAA,EAAD,KACA,gBAACC,EAAA,EAAD,CAAWC,MAAOC,EAAOC,SAAUC,aAAc,SAAAf,GAC7C,EAAKK,SAAS,CACVL,KAAKA,EACLQ,iBAAiB,EACjBN,KAAM,aACNC,gBAAkB,GAClBM,SAAU,GACVL,WAAW,MAGhBY,MAAOC,KAAKV,MAAMP,OAErB,gBAACkB,EAAA,EAAD,CAAkBC,QAAS,WACvB,EAAKd,SAAS,CAACG,iBAAgB,IAC/B,EAAKT,QAAQ,EAAKQ,MAAMP,OACzBY,MAAOC,EAAOO,cAAe,gBAACC,EAAA,EAAD,CAAOT,MAAOC,EAAOS,MAAMC,OAAQC,EAAQ,QAE3E,gBAACC,EAAA,EAAD,cAAaR,KAAKV,MAAML,MACxB,gBAACuB,EAAA,EAAD,cAAaR,KAAKV,MAAMJ,iBACxB,gBAACsB,EAAA,EAAD,oBAAmBR,KAAKV,MAAMH,iB,GA5DEsB,aAkElCb,EAASc,IAAWC,OAAO,CAC7Bd,SAAS,CACZe,aAAa,GACbC,YAAY,IACZC,MAAM,MACNC,UAAU,UAEPZ,aAAa,CAChBa,UAAU,EACHD,UAAU,SACjBD,MAAM,MACNG,WAAW,SACXC,gBAAgB,UAChBN,aAAa,MAEVP,MAAM,CACFS,MAAM,IACNK,OAAO,O,8aCjFMC,E,qIAEnB,OACE,kBAAC3B,EAAA,EAAD,KACE,kBAAC,EAAD,W,GAJ2BgB,IAAMY,WAUxBX,IAAWC,OAAO,CAC/BW,UAAW,CACTC,KAAM,EACNL,gBAAiB,OACjBD,WAAY,SACZO,eAAgB,a,4DClBhB,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.dd32caef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.a264e97b.png\";","const dictionary = {\n  \"the\" : {\n    \"word\" : \"the\",\n    \"lexicalCategory\":\"Determiner\",\n    \"definition\" : \"denoting one or more people or things already mentioned or assumed to be common knowledge.\"\n  },\n  \"india\" : {\n    \"word\" : \"India\",\n    \"lexicalCategory\":\"Noun\",\n    \"definition\" :\"a country in southern Asia occupying the greater part of the Indian subcontinent; population 1,311,000,000 (estimated 2015); official languages, Hindi and English (fourteen other languages are recognized as official in certain regions; of these, Bengali, Gujarati, Marathi, Tamil, Telugu, and Urdu have most first-language speakers); capital, New Delhi.\"\n  },\n  \"externally\" : {\n    \"word\" : \"externally\",\n    \"lexicalCategory\":\"Adverb\",\n    \"definition\" : \"with reference to the outer surface or structure of something; outside\"\n  },\n  \"hello\" : {\n    \"word\" : \"hello\",\n    \"lexicalCategory\":\"Interjection\",\n    \"definition\" : \"used as a greeting or to begin a telephone conversation\"\n  },\n  \"welcome\" : {\n    \"word\" : \"welcome\",\n    \"lexicalCategory\":\"Noun\",\n    \"definition\" : \"an instance or manner of greeting someone\"\n  },\n  \"almost\" : {\n    \"word\" : \"almost\",\n    \"lexicalCategory\":\"Adverb\",\n    \"definition\" : \"not quite; very nearly\"\n  },\n  \"she\" : {\n    \"word\" : \"she\",\n    \"lexicalCategory\":\"Pronoun\",\n    \"definition\" : \"used to refer to a woman, girl, or female animal previously mentioned or easily identified\"\n  },\n  \"tree\" : {\n    \"word\" : \"tree\",\n    \"lexicalCategory\":\"Noun\",\n    \"definition\" : \"a woody perennial plant, typically having a single stem or trunk growing to a considerable height and bearing lateral branches at some distance from the ground.\"\n  },\n  \"wonderful\" : {\n    \"word\" : \"wonderful\",\n    \"lexicalCategory\":\"Adjective\",\n    \"definition\" : \"inspiring delight, pleasure, or admiration; extremely good; marvellous\"\n  },\n  \"ordinary\" : {\n    \"word\" : \"ordinary\",\n    \"lexicalCategory\":\"Adjective\",\n    \"definition\" : \"with no special or distinctive features; normal\"\n  }\n}\n\nexport default dictionary\n","import * as React from 'react'\r\nimport dictionary from '../database'\r\nimport {TextInput,Text,TouchableOpacity,StyleSheet,Image, View} from 'react-native';\r\nexport default class HomeScreen extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            text:\"\",\r\n            isSearchPressed: false,\r\n            word: \"Loading...\",\r\n            lexicalCategory : '',\r\n            examples: [],\r\n            definition:\"\",\r\n            word: \"\",\r\n\r\n        }\r\n    }\r\n    getWord=(text)=>{\r\n\ttext = text.toLowerCase()\r\n\ttry{ \r\n\tvar word = dictionary[text][\"word\"] \r\n\tvar lexicalCategory = dictionary[text][\"lexicalCategory\"] \r\n\tvar definition = dictionary[text][\"definition\"]\r\n\tthis.setState({\r\n\t \"word\":word,\r\n\t \"lexicalCategory\":lexicalCategory,\r\n\t \"definition\": definition\r\n\t}) \r\n   \r\n\t\r\n\t}\r\n\tcatch(err){\r\n\t\tthis.setState({\r\n\t\t\"word\":\"N/A\",\r\n\t \t\"lexicalCategory\":\"N/A\",\r\n\t \t\"definition\": \"N/A\",\r\n\t\t'text':'',\r\n\t\t'isSearchPressed':false\r\n\t\t})\t \r\n\t}\r\n    }\r\n    render(){\r\n        return(\r\n        <View>\r\n        <TextInput style={styles.inputBox} onChangeText={text=>{\r\n            this.setState({\r\n                text:text,\r\n                isSearchPressed: false,\r\n                word: \"Loading...\",\r\n                lexicalCategory : '',\r\n                examples: [],\r\n                definition:\"\"\r\n\r\n            });\r\n        }} value={this.state.text}        \r\n        />\r\n        <TouchableOpacity onPress={()=>{\r\n            this.setState({isSearchPressed:true});\r\n            this.getWord(this.state.text);\r\n        }} style={styles.searchButton} ><Image style={styles.image}source={require(\"../assets/search.png\")} /></TouchableOpacity>\r\n\r\n        <Text>Word: {this.state.word}</Text>\r\n        <Text>Type: {this.state.lexicalCategory}</Text>\r\n        <Text>Definition: {this.state.definition}</Text>\r\n        \r\n        </View>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    inputBox:{\r\n\tborderRadius:16,\r\n\tborderWidth:2.5,\r\n\twidth:\"25%\",\r\n\talignSelf:'center'\r\n    },\r\n    searchButton:{\r\n\tmarginTop:5,\r\n        alignSelf:'center',\r\n\twidth:\"25%\",\r\n\talignItems:'center',\r\n\tbackgroundColor:'#00ff00',\r\n\tborderRadius:10000000000\r\n    },\r\n    image:{\r\n        width:100,\r\n        height:100\r\n    }\r\n})","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport HomeScreen from './screens/HomeScreen'\n\nexport default class App extends React.Component {\nrender(){\n  return (\n    <View>\n      <HomeScreen />\n    </View>\n  );\n}\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}